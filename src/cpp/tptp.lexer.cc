#line 1 "tptp.lexer.cc"

#line 3 "tptp.lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 66
#define YY_END_OF_BUFFER 67
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[344] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       67,   66,    3,    2,   41,    6,   66,    1,   42,    9,
       51,   52,   49,   50,   57,   66,   59,   59,   58,   48,
       39,   47,   44,   46,   65,   53,   54,   45,   64,   64,
       64,   55,   43,   56,   40,    3,    5,    4,    5,    5,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    3,    8,
        6,    8,    8,    1,    8,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,   32,   31,   33,    0,   62,   62,   62,   62,   62,
       62,    1,   12,   59,   59,    0,    0,    0,    0,   59,
       26,   25,   30,    0,   29,   35,   34,   36,   37,   38,
        0,   65,   64,   64,   64,   27,   28,    5,    0,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    8,    0,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    1,    1,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,   63,   62,   62,   62,   62,
       62,   62,   62,    0,   59,   20,   61,   60,    0,   61,
       61,   21,   22,   23,   24,   64,   64,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,   63,   18,   17,   19,   13,   14,   16,   15,   61,

       60,   61,   64,   11,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       64,    5,    8,   64,    5,    8,   64,    5,    8,   10,
        5,    8,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   22,    7,   23,
       24,   25,   26,   27,   28,   28,   28,   28,   29,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       30,   31,   32,   33,   34,    7,   35,   35,   36,   37,

       38,   39,   35,   40,   41,   35,   35,   42,   35,   43,
       44,   35,   35,   35,   35,   45,   46,   35,   35,   35,
       35,   35,   47,   48,   49,   50,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[51] =
    {   0,
        1,    1,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        4,    3,    3,    3,    3,    3,    3,    4,    4,    3,
        3,    3,    3,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    3,    3,    3,    3
    } ;

static const flex_int16_t yy_base[355] =
    {   0,
        0,    0,    0,    0,   50,    0,  100,    0,    0,    0,
      845,  846,  846,  846,  146,  846,  164,    0,  846,  846,
      846,  826,  846,  132,  846,  137,  137,  144,  819,  136,
      817,  846,  153,  161,    0,  846,  846,  846,    0,  798,
      800,  846,  846,  846,  164,  833,  189,  807,  831,  209,
      190,  830,  829,  828,  162,  827,  163,  826,  205,  250,
      252,  192,  212,  213,  825,  214,  215,  285,  824,  823,
      822,  312,  784,  786,  819,  818,  817,  183,  811,  252,
      810,  809,  351,  222,  808,  787,  806,  179,  805,  254,
      804,  272,  387,  389,  256,  284,  216,  803,  271,  285,

      417,  802,  801,  800,  444,  767,  769,  797,  796,  795,
      250,  846,  846,  846,    0,    0,  762,  760,  758,  764,
      247,    0,  846,  285,  297,  776,  290,  779,  322,  345,
      846,  846,  774,  773,  846,  846,  846,  846,  846,  846,
      249,    0,    0,  761,  757,  846,  846,  789,  763,  787,
      786,  785,  485,  512,  747,  745,  743,  749,  296,  366,
      755,  779,  363,  393,  253,  355,  278,  409,  553,  778,
      777,  354,  378,  776,  775,  774,  773,  772,  771,  416,
        0,    0,  740,  736,  768,  767,  761,  740,  752,  744,
      732,  581,  608,  692,  690,  688,  694,  305,  369,  695,

      712,  421,  423,  218,  455,  166,  481,  549,  711,  706,
      410,  425,  704,  702,  701,  684,  681,  678,  482,    0,
        0,  652,  648,  675,  674,    0,    0,  629,  378,  627,
      617,  622,  621,  357,  449,  846,  474,  381,  399,  846,
      427,  846,  846,  846,  846,  617,  646,  635,    0,  602,
      432,  600,  590,  595,  594,  494,  498,  626,  555,  559,
      575,  625,  577,  607,  606,  605,  604,  567,  596,  662,
        0,  568,  466,  568,  544,  549,  547,  523,  583,  574,
      698,  579,  594,  566,  619,  555,  553,  552,  551,  503,
      530,    0,    0,    0,    0,    0,    0,    0,    0,  486,

      488,  515,  493,  846,    0,    0,    0,    0,    0,    0,
        0,    0,  704,  708,  710,  492,  531,    0,    0,    0,
        0,    0,    0,    0,    0,  646,  673,  700,  467,  499,
      437,  412,  367,  347,  335,  300,  289,  282,  225,  846,
      228,  170,  846,  736,  741,  743,  745,  748,  753,  756,
      761,  156,  763,  765
    } ;

static const flex_int16_t yy_def[355] =
    {   0,
      343,    1,  344,  344,  343,    5,  343,    7,    1,    1,
      343,  343,  343,  343,  343,  343,  343,  345,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  346,  343,  343,  343,  347,  347,
      347,  343,  343,  343,  343,  348,  348,  343,  348,  348,
      349,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,   68,   72,   72,  348,  348,  348,  348,  350,  350,
      350,  350,  350,  351,  350,  343,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  101,  105,  105,  350,  350,  350,
      350,  343,  343,  343,  352,  353,  353,  353,  353,  353,
      353,  345,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  346,  347,  347,  347,  343,  343,  348,  343,  348,
      348,  348,  348,  153,  154,  154,  154,  154,  154,  349,
      345,  348,  348,  348,  348,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,  348,  348,  348,
       68,   72,   72,   72,  348,  348,  350,  343,  350,  350,
      350,  350,  192,  193,  193,  193,  193,  193,  351,  345,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  101,
      105,  105,  105,  350,  350,  354,  353,  353,  353,  353,
      353,  353,  353,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  347,  347,   72,  154,  154,
      154,  154,  154,  154,  154,  348,  348,  348,  348,  348,
      348,  348,  348,  348,  348,  348,  348,   72,   72,  105,
      193,  193,  193,  193,  193,  193,  193,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  105,
      105,  354,  353,  353,  353,  353,  353,  353,  353,  343,

      343,  343,  347,  343,  248,  154,  154,  154,  154,  154,
      154,  154,  348,  348,  348,   72,  348,  270,  193,  193,
      193,  193,  193,  193,  193,  350,  350,  350,  105,  350,
      347,   72,  105,  347,   72,  105,  347,   72,  105,  343,
      348,  350,    0,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343
    } ;

static const flex_int16_t yy_nxt[897] =
    {   0,
       12,   13,   14,   13,   15,   16,   12,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   12,   12,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   35,   36,
       12,   37,   38,   12,   39,   39,   39,   39,   39,   39,
       40,   39,   39,   39,   41,   39,   42,   43,   44,   45,
       12,   13,   14,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   49,   49,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   68,   69,
       49,   70,   71,   49,   72,   72,   72,   72,   72,   72,
       73,   72,   72,   72,   74,   72,   75,   76,   77,   78,

       12,   13,   14,   79,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   82,   82,   93,
       94,   95,   96,   97,   98,   99,  100,  101,  101,  102,
       82,  103,  104,   82,  105,  105,  105,  105,  105,  105,
      106,  105,  105,  105,  107,  105,  108,  109,  110,  111,
      112,  124,  125,  126,  127,  128,  124,  125,  132,  133,
      226,  127,  128,  130,  130,  129,  136,  149,  149,  113,
      114,  115,  129,  146,  129,  138,  188,  139,  137,  162,
      188,  129,  163,  164,  140,  134,  282,  141,  149,  188,
      122,  122,  185,  150,  149,  161,  201,  149,  116,  117,

      116,  116,  118,  116,  119,  120,  116,  116,  121,  116,
      149,  147,  151,  152,  149,  170,  153,  149,  149,  149,
      149,  165,  122,  122,  163,  164,  188,  175,  188,  177,
      186,  178,  200,  149,  171,  172,  342,  174,  179,  176,
      213,  180,  280,  154,  155,  154,  154,  156,  154,  157,
      158,  154,  154,  159,  154,  149,  189,  149,  149,  224,
      188,  173,  188,  244,  188,  245,  188,  166,  167,  166,
      167,  169,  169,  202,  203,  190,  191,  258,  168,  209,
      168,  188,  188,  149,  214,  232,  233,  168,  204,  168,
      149,  202,  203,  341,  188,  188,  215,  225,  260,  216,

      340,  217,  234,  128,  181,  181,  210,  211,  218,  237,
      237,  219,  181,  181,  234,  128,  235,  235,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  182,  182,  212,  254,  255,  239,  339,  239,  182,
      182,  240,  241,  276,  277,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  192,  149,
      149,  188,  127,  128,  130,  130,  122,  122,  149,  122,
      122,  161,  338,  129,  259,  259,  300,  300,  264,  200,
      256,  167,  129,  149,  337,  193,  194,  193,  193,  195,
      193,  196,  197,  193,  193,  198,  193,  188,  149,  188,

      301,  301,  265,  336,  205,  206,  205,  206,  208,  208,
      256,  167,  257,  257,  149,  207,  294,  207,  240,  241,
      188,  149,  295,  261,  207,  261,  207,  188,  262,  263,
      266,  188,  267,  188,  286,  188,  220,  220,  278,  206,
      278,  206,  279,  279,  220,  220,  302,  302,  335,  287,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  221,  221,  188,  234,  128,  235,  235,
      307,  221,  221,  334,  281,  281,  308,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  221,  221,  221,  221,
      149,  188,  188,  237,  237,  283,  288,  283,  289,  149,

      284,  285,  129,  149,  320,  300,  300,  301,  301,  188,
      321,  129,  333,  313,  313,  256,  167,  257,  257,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  249,  249,  188,  302,  302,  149,  332,  331,  249,
      249,  330,  326,  326,  329,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  149,  188,
      149,  188,  188,  188,  149,  188,  205,  206,  208,  208,
      166,  167,  169,  169,  259,  259,  188,  207,  314,  314,
      149,  168,  149,  168,  188,  325,  207,  324,  323,  188,
      168,  188,  168,  188,  262,  263,  315,  315,  327,  327,

      278,  206,  279,  279,  188,  322,  319,  317,  316,  149,
      149,  149,  149,  284,  285,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  271,  271,  188,
      149,  149,  312,  311,  310,  271,  271,  309,  328,  328,
      306,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  305,  305,  188,  304,  303,  299,
      298,  297,  305,  305,  296,  326,  326,  293,  305,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  318,  318,  188,  188,  188,  291,  290,  188,  318,
      318,  188,  327,  327,  188,  318,  318,  318,  318,  318,

      318,  318,  318,  318,  318,  318,  318,  318,  188,  149,
      188,  188,  188,  149,  188,  149,  188,  281,  281,  328,
      328,  188,  188,  313,  313,  199,  207,  314,  314,  315,
      315,  275,  274,  273,  272,  207,   12,   12,   12,   12,
       12,  122,  188,  122,  122,  122,  142,  142,  143,  143,
      148,  148,  148,  160,  188,  160,  160,  160,  187,  187,
      187,  199,  188,  199,  199,  199,  227,  227,  292,  292,
      187,  188,  149,  149,  269,  268,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  160,  253,  252,  251,  250,
      149,  149,  149,  148,  149,  247,  246,  243,  242,  238,

      236,  231,  230,  229,  228,  188,  188,  188,  223,  222,
      188,  188,  188,  188,  188,  188,  188,  187,  188,  188,
      188,  188,  149,  149,  149,  184,  183,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  148,  149,  145,
      144,  135,  131,  123,  343,   11,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343

    } ;

static const flex_int16_t yy_chk[897] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       15,   24,   24,   26,   27,   27,   26,   26,   30,   30,
      352,   28,   28,   28,   28,   27,   33,   55,   57,   15,
       15,   17,   28,   45,   27,   34,  206,   34,   33,   55,
      342,   28,   57,   57,   34,   30,  206,   34,   78,   88,
       51,   51,   78,   47,   47,   51,   88,   62,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       59,   45,   47,   47,   50,   62,   50,   63,   64,   66,
       67,   59,   84,   84,   59,   59,   97,   66,  204,   67,
       78,   67,   84,  341,   63,   63,  339,   64,   67,   66,
       97,   67,  204,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   60,   80,   61,  165,  111,
      111,   63,   80,  141,   90,  141,   95,   60,   60,   61,
       61,   61,   61,   90,   90,   80,   80,  165,   60,   95,
       61,   99,   92,  167,   99,  121,  121,   60,   92,   61,
       68,   92,   92,  338,   96,  100,   99,  111,  167,  100,

      337,  100,  124,  124,   68,   68,   96,   96,  100,  127,
      127,  100,   68,   68,  125,  125,  125,  125,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   72,   72,   96,  159,  159,  129,  336,  129,   72,
       72,  129,  129,  198,  198,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   83,  172,
      166,   83,  130,  130,  130,  130,  160,  160,  163,  199,
      199,  160,  335,  130,  166,  166,  234,  234,  172,  199,
      163,  163,  130,  173,  334,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   83,   83,   83,   93,  164,   94,

      238,  238,  173,  333,   93,   93,   94,   94,   94,   94,
      164,  164,  164,  164,  168,   93,  229,   94,  239,  239,
      211,  180,  229,  168,   93,  168,   94,  101,  168,  168,
      180,  202,  180,  203,  211,  212,  101,  101,  202,  202,
      203,  203,  203,  203,  101,  101,  241,  241,  332,  212,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  105,  105,  205,  235,  235,  235,  235,
      251,  105,  105,  331,  205,  205,  251,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      153,  207,  219,  237,  237,  207,  219,  207,  219,  256,

      207,  207,  237,  257,  273,  300,  300,  301,  301,  330,
      273,  237,  329,  256,  256,  257,  257,  257,  257,  153,
      153,  153,  153,  153,  153,  153,  153,  153,  153,  153,
      153,  154,  154,  278,  302,  302,  317,  316,  303,  154,
      154,  291,  278,  278,  290,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  154,  154,  169,  208,
      259,  289,  288,  287,  260,  286,  208,  208,  208,  208,
      169,  169,  169,  169,  259,  259,  284,  208,  260,  260,
      261,  169,  263,  259,  280,  277,  208,  276,  275,  282,
      169,  192,  259,  279,  261,  261,  263,  263,  282,  282,

      279,  279,  279,  279,  283,  274,  272,  269,  268,  267,
      266,  265,  264,  283,  283,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  193,  193,  285,
      262,  258,  255,  254,  253,  193,  193,  252,  285,  285,
      250,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  248,  248,  326,  247,  246,  233,
      232,  231,  248,  248,  230,  326,  326,  228,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  270,  270,  327,  225,  224,  223,  222,  218,  270,
      270,  217,  327,  327,  216,  270,  270,  270,  270,  270,

      270,  270,  270,  270,  270,  270,  270,  270,  281,  313,
      328,  215,  214,  314,  213,  315,  210,  281,  281,  328,
      328,  209,  201,  313,  313,  200,  281,  314,  314,  315,
      315,  197,  196,  195,  194,  281,  344,  344,  344,  344,
      344,  345,  191,  345,  345,  345,  346,  346,  347,  347,
      348,  348,  348,  349,  190,  349,  349,  349,  350,  350,
      350,  351,  189,  351,  351,  351,  353,  353,  354,  354,
      188,  187,  186,  185,  184,  183,  179,  178,  177,  176,
      175,  174,  171,  170,  162,  161,  158,  157,  156,  155,
      152,  151,  150,  149,  148,  145,  144,  134,  133,  128,

      126,  120,  119,  118,  117,  110,  109,  108,  107,  106,
      104,  103,  102,   98,   91,   89,   87,   86,   85,   82,
       81,   79,   77,   76,   75,   74,   73,   71,   70,   69,
       65,   58,   56,   54,   53,   52,   49,   48,   46,   41,
       40,   31,   29,   22,   11,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[66] =
    {   0,
       41,   43,   44,   47,   48,   49,   50,   51,   52,   55,
       56,   57,   59,   60,   61,   62,   63,   64,   65,   68,
       69,   70,   71,   72,   74,   75,   76,   77,   78,   79,
       80,   81,   82,   83,   84,   85,   86,   87,   89,   90,
       91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      103,  104,  105,  106,  107,  108,  109,  110,  112,  113,
      114,  116,  117,  118,  119
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "tptp.ll"
#line 2 "tptp.ll"
#include <cerrno>
#include <climits>
#include <cstdlib>
#include <string>

#include <cstring> // strerror

#include "tptp.grammar.hh"
#include "tptp.parser.hh"

#define YY_TXT std::string(yytext, yyleng)

// Code run each time a pattern is matched.
# define YY_USER_ACTION  loc.columns (yyleng);

#define TOK(token) return yy::parser::make_ ## token (std::move(YY_TXT), loc);
#define END_OF_FILE return yy::parser::make_END_OF_FILE(loc);

// %option noyywrap nounput noinput batch debug
#line 867 "tptp.lexer.cc"
#define YY_NO_INPUT 1

#line 870 "tptp.lexer.cc"

#define INITIAL 0
#define COMMENT 1
#define DO_MODE 2
#define SQ_MODE 3
#define LINE_COMMENT 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 29 "tptp.ll"



#line 33 "tptp.ll"
    // Code run each time yylex is called.
    yy::location& loc = drv.location;
    loc.step ();


    /* explicit eof token, since we need to type it */
#line 1163 "tptp.lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 344 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 846 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 66 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 66 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 67 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(DO_MODE):
case YY_STATE_EOF(SQ_MODE):
case YY_STATE_EOF(LINE_COMMENT):
#line 39 "tptp.ll"
END_OF_FILE
	YY_BREAK
/* line comment */
case 1:
YY_RULE_SETUP
#line 41 "tptp.ll"

	YY_BREAK
/* ignore newlines, whitspaces and comments, register newlines to track the scanner position in the file */
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 43 "tptp.ll"
loc.lines (yyleng); loc.step (); 
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 44 "tptp.ll"

	YY_BREAK
/* " and ' quoted strings */
case 4:
YY_RULE_SETUP
#line 47 "tptp.ll"
BEGIN INITIAL; TOK(Double_quote)
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 48 "tptp.ll"
TOK(Do_string)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 49 "tptp.ll"
BEGIN DO_MODE; TOK(Double_quote)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 50 "tptp.ll"
BEGIN INITIAL; TOK(Single_quote)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 51 "tptp.ll"
TOK(Sq_string)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 52 "tptp.ll"
BEGIN SQ_MODE; TOK(Single_quote)
	YY_BREAK
/* annontaions */
case 10:
YY_RULE_SETUP
#line 55 "tptp.ll"
TOK(DefinitionInclude)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 56 "tptp.ll"
TOK(DefinitionTHF)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 57 "tptp.ll"
TOK(DefinitionEnd)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 59 "tptp.ll"
TOK(Dollar_ite)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 60 "tptp.ll"
TOK(Dollar_let)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 61 "tptp.ll"
TOK(Dollar_thf)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "tptp.ll"
TOK(Dollar_tff)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 63 "tptp.ll"
TOK(Dollar_fof)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 64 "tptp.ll"
TOK(Dollar_cnf)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 65 "tptp.ll"
TOK(Dollar_fot)
	YY_BREAK
/* unary and binary ops, sorted by length to ensure the correct token is parsed */
case 20:
YY_RULE_SETUP
#line 68 "tptp.ll"
TOK(Gentzen_arrow)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 69 "tptp.ll"
TOK(Iff)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 70 "tptp.ll"
TOK(Niff)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 71 "tptp.ll"
TOK(ChoiceComb)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 72 "tptp.ll"
TOK(DescriptionComb)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 74 "tptp.ll"
TOK(Subtype_sign)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 75 "tptp.ll"
TOK(Assignment)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 76 "tptp.ll"
TOK(Nand)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 77 "tptp.ll"
TOK(Nor)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 78 "tptp.ll"
TOK(Impl)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 79 "tptp.ll"
TOK(If)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "tptp.ll"
TOK(Infix_inequality)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "tptp.ll"
TOK(ForallComb)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "tptp.ll"
TOK(TyForall)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "tptp.ll"
TOK(ExistsComb)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "tptp.ll"
TOK(TyExists)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "tptp.ll"
TOK(Choice)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 86 "tptp.ll"
TOK(Description)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "tptp.ll"
TOK(EqComb)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 89 "tptp.ll"
TOK(Infix_equality)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 90 "tptp.ll"
TOK(Not)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 91 "tptp.ll"
TOK(Forall)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 92 "tptp.ll"
TOK(And)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 93 "tptp.ll"
TOK(Or)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 94 "tptp.ll"
TOK(Exists)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 95 "tptp.ll"
TOK(Lambda)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 96 "tptp.ll"
TOK(App)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 97 "tptp.ll"
TOK(Arrow)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 98 "tptp.ll"
TOK(Less_sign)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 99 "tptp.ll"
TOK(Star)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 100 "tptp.ll"
TOK(Plus)
	YY_BREAK
/* signs */
case 51:
YY_RULE_SETUP
#line 103 "tptp.ll"
TOK(LParen)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "tptp.ll"
TOK(RParen)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 105 "tptp.ll"
TOK(LBrkt)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 106 "tptp.ll"
TOK(RBrkt)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 107 "tptp.ll"
TOK(LCurly)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 108 "tptp.ll"
TOK(RCurly)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 109 "tptp.ll"
TOK(Comma)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 110 "tptp.ll"
TOK(Colon)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "tptp.ll"
TOK(Integer)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 113 "tptp.ll"
TOK(Rational)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 114 "tptp.ll"
TOK(Real)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 116 "tptp.ll"
TOK(Dollar_word)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 117 "tptp.ll"
TOK(Dollar_dollar_word)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 118 "tptp.ll"
TOK(Lower_word)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 119 "tptp.ll"
TOK(Upper_word)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 121 "tptp.ll"
ECHO;
	YY_BREAK
#line 1588 "tptp.lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 344 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 344 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 343);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 121 "tptp.ll"


void
tptp::parser::scan_begin ()
{
    yy_flex_debug = trace_scanning;
    if (file.empty () || file == "-")
    yyin = stdin;
    else if (!(yyin = fopen (file.c_str (), "r")))
    {
        std::cerr << "cannot open " << file << ": " << strerror(errno) << '\n';
        exit (EXIT_FAILURE);
    }
}

void
tptp::parser::scan_end ()
{
    fclose (yyin);
}
