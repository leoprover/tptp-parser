#############################################################
#
# Makefile     : Makefile to build different tptp lexer and parser.
# Author       : Marco Tr√§ger
# Last Updated : 2019/08
#
#############################################################

# c++ compiler
CC    = g++ -g
# generate only object files, for a shared lib:
# -c generate only object files
# -fPIC option tells the compiler to generate position-independent code 
# (i.e. code that can be loaded at any particular virtual memory address at runtime)
CCO   = g++ -g -c -fpic
# generates a shared lib
CCS   = g++ -g -shared
# flex lexer
LEX   = flex -I
# bison
BISON = bison -d -y -Wno-yacc --verbose
# swig
SWIG  = swig

#############################################################
# SWIG TARGETS
#############################################################
SWIG_PYTHON3 = ../python3
SWIG_PYTHON3_INCLUDE_MODULE = -I/usr/include/python3.7m

#############################################################
# Alternative
#
#CC    = g++ -g
#LEX   = flex -I
#BISON = bison -d -y -Wno-yacc --verbose
#############################################################

all: parse-test swig-python3

generate-parser: tptp.yy tptp.ll
	$(BISON) -o tptp.grammar.cc tptp.yy
	$(LEX)   -o tptp.lexer.cc tptp.ll

parse-test: generate-parser tptp.test.cc tptp.parser.cc
	$(CC)    -o tptp tptp.test.cc tptp.parser.cc tptp.lexer.cc tptp.grammar.cc tptp.ast.cc

swig-python3: generate-parser
	mkdir -p $(SWIG_PYTHON3)
	cp *.hh $(SWIG_PYTHON3)/.
	$(SWIG) -python -c++ -o $(SWIG_PYTHON3)/tptp.parser.python.cc -outdir $(SWIG_PYTHON3) tptp.parser.i
	( cd $(SWIG_PYTHON3); \
	  $(CCO) $(SWIG_PYTHON3_INCLUDE_MODULE) tptp.parser.python.cc; \
	  $(CCS) -o _tptp.parser.python.so tptp.parser.python.o; )

clean:      
	rm -f *.BAK *.o *.so core *~* *.a
	rm -f stack.hh position.hh location.hh
	rm -f *.grammar.cc *.grammar.cc *.lexer.cc *.grammar.hh *.out
	( cd $(SWIG_PYTHON3); \
	  rm -f tptp_parser.py *.hh *.cc *.o *.so; )
	rm -f tptp
